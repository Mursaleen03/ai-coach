// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id             String           @id   @default(uuid())
  clerkUserId    String           @unique // clerk user id
  email          String           @unique
  name           String?
  imageUrl       String?
  industry       String?    //Combined industry-subindustry (e.g. "tech-software-development")

  industryInsight IndustryInsight? @relation(fields: [industry], references: [industry])
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  // profile fields
  bio           String?
  experience   Int?
  skills        String[]         // array of skills

  assesments        Assessment[]
  resume            Resume[]
  coverLetters      CoverLetter[]
}

model Assessment{
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  quizScore       Float
  questions       Json[] // array of {questions, answers, userAnswer, isCorrect}
  category        String // e.g. "technical", "behavioral", "situational"
  improvementTip  String? //  AI generated improvement tip
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId])
}

model Resume{
  id              String  @id @default(cuid())
  userId          String  @unique  //  one resume per user
  user            User    @relation(fields: [userId], references: [id])
  content         String  @db.Text  // resume text content
  // atsScore       Float?  // AI generated ATS score
  // feedback       String? // AI generated feedback
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

model CoverLetter{
  id                  String    @id  @default(cuid())
  userId              String
  user                User      @relation(fields: [userId], references: [id])
  content             String   //Markdown content
  jobDescription      String?
  companyName         String    //Name of the company applying to
  jobTitle            String    //Position applying for
  createdAt           DateTime   @default(now())
  updatedAt           DateTime  @updatedAt


  @@index([userId])
}

model IndustryInsight{
    id                  String   @id   @default(cuid())
    industry            String   @unique   // The industry this data belongs to (e.g.,"tech-software-development")

     // users in this industry
    users               User[]

     // salary data 
    salaryRanges       Json[]   // Array of {role: string, min: float, max: float, medium: float, location: string?}
    
    //Industry trends 
    growthRate        Float   // industry growth rate
    demandLevel       DemandLevel  // "High", "medium",  "Low"
    topSkills         String[]  // most in-demand  Skills

    //Market conditions
    marketOutlook     MarketOutlook  // e.g. "positive", "Stable", "negative"
    keyTrends         String[]  // Array of current indutry trends

    // Learning Suggestions
    recommendedSkills String[] // Array of recommeded skills to learn

    lastUpdated      DateTime  @default(now())
    nextUpdate       DateTime  //Schedule update time

    @@index([industry])

}


enum DemandLevel {
  HIGH
  MEDIUM 
  LOW 
}

enum MarketOutlook {
  POSITIVE
  NEUTRAL
  NEGATIVE
}